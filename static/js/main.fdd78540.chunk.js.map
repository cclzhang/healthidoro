{"version":3,"sources":["assets/healthidoro-logo.png","components/header/Header.js","components/timer/TimerDisplay.js","components/timer/EmptyTimer.js","components/timer/SetTimer.js","components/timer/TimerStopAlertModal.js","components/timer/types/Pomo.js","components/timer/types/Break.js","components/timer/Timer.js","assets/shortSong.mp3","assets/longSong.mp3","components/timer/MusicPlayer.js","pages/Healthidoro.js","pages/Pomobasic.js","components/header/Info.js","components/header/SettingsHealthidoro.js","components/header/SettingsPomobasic.js","components/header/Settings.js","components/footer/Clock.js","components/footer/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["Header","isHealthidoro","handleInfoClick","handleSettingsClick","src","logo","alt","className","onClick","size","TimerDisplay","hrs","mins","secs","hours","parseInt","minutes","seconds","EmptyTimer","setTimerMode","SetTimer","setHrs","setMins","setSecs","minsSecsRegex","handleInput","e","regexType","timeUnitToSet","target","value","match","action","onSubmit","preventDefault","alert","type","id","placeholder","onChange","htmlFor","TimerStopAlertModal","open","setOpen","handleClose","Dialog","onClose","DialogTitle","DialogActions","Pomo","counter","setTimerType","timerType","workdayLength","pomoLength","longBreakInterval","isAutoBreak","isBreakAlert","isPomoDone","isAutoPomo","setIsPomoDone","breakType","isBreakDone","setIsBreakDone","setBreakType","useState","isStopAlertOpen","setIsStopAlertOpen","isActive","setIsActive","interval","useEffect","setInterval","console","log","clearInterval","handleGoBreakButton","Break","breakLengthLong","breakLengthShort","setSeconds","switchCase","handleGoPomoButton","Timer","hrsInit","minsInit","secsInit","MusicPlayer","isMuted","setIsMuted","shortSong","audioFile","setAudioFile","audioEl","useRef","fetch","then","current","play","catch","error","longSong","pause","muted","ref","Healthidoro","setIsHealthidoro","isMusicOnBreak","setPomoLength","setBreakLengthShort","setBreakLengthLong","setLongBreakInterval","timerMode","setHrsInit","setMinsInit","setSecsInit","Pomobasic","Info","DialogContent","SettingsHealthidoro","isStandardWorkday","setIsStandardWorkday","to","SettingsPomobasic","name","disabled","Settings","setIsMusicOnBreak","setIsAutoBreak","setIsAutoPomo","setIsBreakAlert","isDarkMode","setIsDarkMode","buttonHandler","setButtonState","buttonState","role","Clock","Date","getHours","clockHr","setClockHr","getMinutes","clockMin","setClockMin","styles","Footer","href","App","isInfoOpen","setIsInfoOpen","isSettingsOpen","setIsSettingsOpen","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fdd78540.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/healthidoro-logo.32aa20ad.png\";","import logo from '../../assets/healthidoro-logo.png';\r\nimport { GearIcon, LightBulbIcon } from '@primer/octicons-react';\r\n\r\nconst Header = ({\r\n  isHealthidoro, handleInfoClick, handleSettingsClick, \r\n}) => {\r\n\r\n  return (\r\n    <header \r\n    // className={styles.Header}\r\n    >\r\n      {/* <source media=\"(max-width: 799px)\" srcset=\"elva-480w.jpg\">\r\n      <source media=\"(min-width: 800px)\" srcset=\"elva-800w.jpg\">\r\n      <img src=\"elva-800w.jpg\"> */}\r\n      <img src={logo} alt=\"logo which is a coral lotus flower\" className=\"logo\" />\r\n      <h1>\r\n        {isHealthidoro ? \"Healthidoro\" : \"Pomobasic\"}\r\n      </h1>\r\n\r\n      <ul>\r\n        <li>\r\n          <button onClick={handleInfoClick}>\r\n            <LightBulbIcon size={24} />\r\n          </button>\r\n        </li>\r\n        <li>\r\n          <button onClick={handleSettingsClick}>\r\n            <GearIcon size={24} />\r\n          </button>\r\n        </li>\r\n      </ul>\r\n\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header;","\r\nfunction TimerDisplay({hrs, mins, secs}) {\r\n  let hours = parseInt(hrs);\r\n  let minutes = parseInt(mins);\r\n  let seconds = parseInt(secs);\r\n\r\n  if (hours < 10) {\r\n    hours = '0' + hrs;\r\n  }\r\n  if (minutes < 10) {\r\n    minutes = '0' + mins;\r\n  }\r\n  if (seconds < 10) {\r\n    seconds = '0' + secs;\r\n  }\r\n\r\n  return (\r\n    <p>{`${hours}:${minutes}:${seconds}`}</p>\r\n  );\r\n}\r\n\r\nexport default TimerDisplay;","import TimerDisplay from './TimerDisplay';\r\n\r\nconst EmptyTimer = ({setTimerMode}) => {\r\n  // timerModes: 'empty', 'inputting', 'complete', 'break'\r\n  return (\r\n    <main>\r\n      <TimerDisplay \r\n        hrs='0'\r\n        mins='0'\r\n        secs='0'\r\n      />\r\n      <button onClick={() => setTimerMode('inputting')}>add workday</button>\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default EmptyTimer;","\r\n\r\nconst SetTimer = ({ setTimerMode, hrs, setHrs, mins, setMins, secs, setSecs }) => {\r\n  const hrsRegex = \"^(1[0-6]|[1-9])$\";\r\n  const minsSecsRegex = \"^[0-5]?[0-9]$\";\r\n\r\n  const handleInput = (e, regexType, timeUnitToSet) => {\r\n    if (e.target.value.match(regexType)) {\r\n      timeUnitToSet(e.target.value);\r\n    }\r\n    if (e.target.value === '') {\r\n      timeUnitToSet('0');\r\n    }\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (parseInt(hrs) * 3600 + parseInt(mins) * 60 + parseInt(secs) === 0) {\r\n      return alert(\"please enter a time\");\r\n    } \r\n\r\n    if (parseInt(hrs) * 3600 + parseInt(mins) * 60 + parseInt(secs) < 120) {\r\n      return alert(\"I'm sure you can work longer than 2 mins\");\r\n    }\r\n\r\n    if (parseInt(hrs) * 3600 + parseInt(mins) * 60 + parseInt(secs) > 57600) {\r\n      return alert(\"I don't support work hours longer than 16hrs. One you need a break. Two you need to sleep. Three you need a life.\");\r\n    }\r\n\r\n    setTimerMode('complete');\r\n  }\r\n\r\n  return (\r\n    <main>\r\n      <form action=\"\" onSubmit={handleSubmit}>\r\n        <span>\r\n          <input\r\n            type=\"text\"\r\n            id=\"timerHr\"\r\n            placeholder=\"0\"\r\n            onChange={e => handleInput(e, hrsRegex, setHrs)}\r\n            value={hrs === '0' ? '' : hrs}\r\n          />\r\n          <label htmlFor=\"timerHr\">h</label>\r\n        </span>\r\n        <span>\r\n          <input\r\n            type=\"text\"\r\n            id=\"timerMin\"\r\n            placeholder='0'\r\n            onChange={e => handleInput(e, minsSecsRegex, setMins)}\r\n            value={mins === '0' ? '' : mins}\r\n          />\r\n          <label htmlFor=\"timerMin\">m</label>\r\n        </span>\r\n        <span>\r\n          <input\r\n            type=\"text\"\r\n            id=\"timerSec\"\r\n            placeholder='0'\r\n            onChange={e => handleInput(e, minsSecsRegex, setSecs)}\r\n            value={secs === '0' ? '' : secs}\r\n          />\r\n          <label htmlFor=\"timerSec\">s</label>\r\n        </span>\r\n        <button type=\"submit\">set Workday</button>\r\n      </form>\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default SetTimer;","import { Dialog, DialogTitle, DialogActions} from '@material-ui/core';\r\n\r\nconst TimerStopAlertModal = ({open, setOpen, setTimerMode}) => {\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleForceStop = () => {\r\n    setTimerMode('empty');\r\n    setOpen(false);\r\n  }\r\n\r\n  return (\r\n    <Dialog open={open} onClose={handleClose} aria-labelledby=\"stopAlert\">\r\n      <DialogTitle id=\"stopAlert\">are you sure you want to reset timer</DialogTitle>\r\n      <DialogActions>\r\n        <button onClick={handleForceStop}>yes</button>\r\n        <button onClick={handleClose}>no</button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nexport default TimerStopAlertModal;","import TimerStopAlertModal from \"../TimerStopAlertModal\";\r\nimport { useState, useEffect, Fragment } from \"react\";\r\n\r\nconst Pomo = ({\r\n  setTimerMode, timerType, setTimerType, \r\n  hrs, mins, secs, setHrs, setMins, setSecs, \r\n  workdayLength, pomoLength, longBreakInterval, \r\n  isAutoBreak, isBreakAlert, isAutoPomo, \r\n  isPomoDone, setIsPomoDone, isBreakDone, setIsBreakDone, \r\n  breakType, setBreakType\r\n}) => {\r\n  const [isStopAlertOpen, setIsStopAlertOpen] = useState(false);\r\n  const [isActive, setIsActive] = useState(false);\r\n\r\n  const handleGoBreakButton = (e, breakType) => {\r\n    e.preventDefault();\r\n    setTimerType(breakType);\r\n  }\r\n\r\n  const handleStop = () => {\r\n    setIsActive(false);\r\n    setIsStopAlertOpen(true);\r\n  }\r\n\r\n  let interval = null;\r\n  let counter;\r\n\r\n  useEffect(() => {\r\n    if (isActive) {\r\n      interval = setInterval(() => {\r\n        counter = hrs * 3600 + mins * 60 + secs - 1;\r\n        \r\n        if (isBreakAlert && workdayLength - counter > workdayLength - 3) {\r\n          console.log(workdayLength - counter)\r\n        }\r\n\r\n        if ((workdayLength - counter) % (pomoLength * longBreakInterval) === 0 && counter > ((pomoLength * longBreakInterval) * 1.5)) {\r\n          // break every hour and counter is bigger than 1h 30mins\r\n          setIsActive(!isActive);\r\n          if (isAutoBreak) {\r\n            setTimerType('longBreak');\r\n          } else {\r\n            setIsPomoDone(true);\r\n            setBreakType('longBreak');\r\n          }\r\n        } else if ((workdayLength - counter) % pomoLength === 0 && counter > (pomoLength * 1.5)) {\r\n          // break every 20mins and counter is bigger than 30mins\r\n          setIsActive(!isActive);\r\n          if(isAutoBreak) {\r\n            setTimerType('shortBreak');\r\n          } else {\r\n            setIsPomoDone(true);\r\n            setBreakType('shortBreak');\r\n          }\r\n        } \r\n\r\n        // clear interval when timer reaches zero\r\n        if (secs + mins + hrs === 0) {\r\n          setIsActive(!isActive);\r\n        } else if (secs > 0) {\r\n          setSecs(secs => secs - 1);\r\n        } else {\r\n          // new seconds === 0 and newMins > 0\r\n          if (mins > 0) {\r\n            setMins(mins => mins - 1);\r\n            setSecs(59);\r\n          } else {\r\n            // if newMins === 0 and newHrs > 0\r\n            if (hrs > 0) {\r\n              setHrs(hrs => hrs - 1);\r\n              setMins(59);\r\n              setSecs(59);\r\n            }\r\n          }\r\n        }\r\n      }, 1000)\r\n    } else if (!isActive && !(secs + mins + hrs === 0)) {\r\n      // when pause is clicked, stop interval\r\n      clearInterval(interval);\r\n    }\r\n    return () => clearInterval(interval);\r\n  }, [hrs, mins, secs, isActive]);\r\n\r\n  return (\r\n    <Fragment>\r\n      {isPomoDone && !isAutoBreak\r\n        ? <button onClick={e => handleGoBreakButton(e, breakType)}>go to break</button>\r\n        : (\r\n          <Fragment>\r\n            <button onClick={() => setIsActive(!isActive)}>\r\n              {isActive ? \"pause\" : \"play\"}\r\n            </button>\r\n            <button onClick={handleStop}>stop</button>\r\n          </Fragment>\r\n          )\r\n      }\r\n    \r\n      <TimerStopAlertModal\r\n        open={isStopAlertOpen}\r\n        setOpen={setIsStopAlertOpen}\r\n        setTimerMode={setTimerMode}\r\n      />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Pomo;","\r\nimport { Fragment } from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nconst Break = ({ \r\n  timerType, setTimerType, breakLengthLong, breakLengthShort, \r\n  isAutoPomo, setIsPomoDone, breakType, isAutoBreak, isBreakDone, setIsBreakDone\r\n}) => {\r\n  const [seconds, setSeconds] = useState(0);\r\n  const [isActive, setIsActive] = useState(true);\r\n\r\n  const handleGoPomoButton = (e) => {\r\n    e.preventDefault();\r\n    setTimerType('pomo');\r\n    setIsBreakDone(false);\r\n  }\r\n\r\n  let interval = null;\r\n  useEffect(() => {\r\n\r\n    if (isActive) {\r\n      interval = setInterval(() => {\r\n        if (timerType === 'longBreak' && breakLengthLong - (seconds + 1) < 0) {\r\n          setIsBreakDone(true);\r\n          setIsActive(false);\r\n          setIsPomoDone(false);\r\n          setSeconds(0);\r\n          if(isAutoPomo) {\r\n            setTimerType('pomo');\r\n          }\r\n\r\n        } else if (timerType === 'shortBreak' && breakLengthShort - (seconds + 1) < 0) {\r\n          setIsBreakDone(true);\r\n          setIsActive(false);\r\n          setIsPomoDone(false);\r\n          setSeconds(0);\r\n          \r\n          if(isAutoPomo) {\r\n            setTimerType('pomo');\r\n          }\r\n\r\n        } else {\r\n          setSeconds(seconds => seconds + 1);\r\n\r\n        }\r\n      }, 1000);\r\n      return () => clearInterval(interval);\r\n    }\r\n\r\n  }, [timerType, isActive, seconds]);\r\n\r\n  const switchCase = (timerType) => {\r\n    switch (timerType) {\r\n      case 'shortBreak':\r\n        return <h4>it's time to give your eyes a break</h4>\r\n      case 'longBreak':\r\n        return <h4>it's time to go for a walk</h4>\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      {switchCase(timerType)}\r\n      {isBreakDone && !isAutoPomo\r\n        ? (\r\n        <Fragment>\r\n          <p>break time's up</p>\r\n          <button onClick={e => handleGoPomoButton(e, breakType)}>go to pomo</button>\r\n        </Fragment>\r\n        )\r\n        : <p>{breakLengthShort - seconds}seconds of breaktime left</p>\r\n      }\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Break;","import { useState, Fragment } from \"react\";\r\nimport Pomo from './types/Pomo';\r\nimport Break from './types/Break';\r\nimport TimerDisplay from \"./TimerDisplay\";\r\n\r\nconst Timer = ({\r\n  setTimerMode, timerType, setTimerType,\r\n  hrsInit, minsInit, secsInit, \r\n  pomoLength, breakLengthShort, breakLengthLong, longBreakInterval, \r\n  isAutoBreak, isAutoPomo, isBreakAlert, \r\n}) => {\r\n\r\n  const [hrs, setHrs] = useState(parseInt(hrsInit));\r\n  const [mins, setMins] = useState(parseInt(minsInit));\r\n  const [secs, setSecs] = useState(parseInt(secsInit));\r\n  const workdayLength = parseInt(hrsInit) * 3600 + parseInt(minsInit) * 60 + parseInt(secsInit);\r\n\r\n  const [isPomoDone, setIsPomoDone] = useState(false);\r\n  const [isBreakDone, setIsBreakDone] = useState(false);\r\n  const [breakType, setBreakType] = useState(\"shortBreak\");\r\n\r\n  const switchCase = (timerType) => {\r\n    switch (timerType) {\r\n      case 'pomo':\r\n        return <Pomo\r\n          setTimerMode={setTimerMode}\r\n          timerType={timerType}\r\n          setTimerType={setTimerType}\r\n\r\n          hrs={hrs}\r\n          mins={mins}\r\n          secs={secs}\r\n          setHrs={setHrs}\r\n          setMins={setMins}\r\n          setSecs={setSecs}\r\n\r\n          workdayLength={workdayLength}\r\n          pomoLength={pomoLength}\r\n          longBreakInterval={longBreakInterval}\r\n\r\n          isAutoBreak={isAutoBreak}\r\n          isAutoPomo={isAutoPomo}\r\n          isBreakAlert={isBreakAlert}\r\n\r\n          isPomoDone={isPomoDone}\r\n          setIsPomoDone={setIsPomoDone}\r\n          isBreakDone={isBreakDone}\r\n          setIsBreakDone={setIsBreakDone}\r\n\r\n          breakType={breakType}\r\n          setBreakType={setBreakType}\r\n        />\r\n      case 'shortBreak':\r\n        return <Break\r\n          timerType={timerType}\r\n          setTimerType={setTimerType}\r\n          breakLengthLong={breakLengthLong}\r\n          breakLengthShort={breakLengthShort}\r\n\r\n          isAutoPomo={isAutoPomo}\r\n          setIsPomoDone={setIsPomoDone}\r\n          isBreakDone={isBreakDone}\r\n          setIsBreakDone={setIsBreakDone}\r\n          breakType={breakType}\r\n          isAutoBreak={isAutoBreak}\r\n        />\r\n      case 'longBreak':\r\n        return <Break\r\n          timerType={timerType}\r\n          setTimerType={setTimerType}\r\n          breakLengthLong={breakLengthLong}\r\n          breakLengthShort={breakLengthShort}\r\n\r\n          isAutoPomo={isAutoPomo}\r\n          setIsPomoDone={setIsPomoDone}\r\n          isBreakDone={isBreakDone}\r\n          setIsBreakDone={setIsBreakDone}\r\n          breakType={breakType}\r\n          isAutoBreak={isAutoBreak}\r\n        />\r\n      default:\r\n        return <Pomo\r\n          setTimerMode={setTimerMode}\r\n          timerType={timerType}\r\n          setTimerType={setTimerType}\r\n\r\n          hrs={hrs}\r\n          mins={mins}\r\n          secs={secs}\r\n          setHrs={setHrs}\r\n          setMins={setMins}\r\n          setSecs={setSecs}\r\n\r\n          workdayLength={workdayLength}\r\n          pomoLength={pomoLength}\r\n          longBreakInterval={longBreakInterval}\r\n\r\n        />\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <TimerDisplay \r\n        hrs={hrs}\r\n        mins={mins}\r\n        secs={secs}\r\n      />\r\n      {switchCase(timerType)}\r\n    </Fragment>\r\n  )\r\n\r\n}\r\n\r\nexport default Timer;","export default __webpack_public_path__ + \"static/media/shortSong.1ffe718a.mp3\";","export default __webpack_public_path__ + \"static/media/longSong.bb10ad67.mp3\";","import React, { useState, useRef, useEffect } from 'react';\r\nimport shortSong from '../../assets/shortSong.mp3';\r\nimport longSong from '../../assets/longSong.mp3';\r\n\r\nconst MusicPlayer = ({timerType}) => {\r\n\r\n  const [isMuted, setIsMuted] = useState(false);\r\n  const [audioFile, setAudioFile] = useState(shortSong);\r\n  const audioEl = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (timerType === 'shortBreak') {\r\n      fetch(shortSong)\r\n        .then(() => {\r\n          setAudioFile(shortSong);\r\n        })\r\n        .then(() => {\r\n          return audioEl.current.play();\r\n        })\r\n        .catch(error => {\r\n          console.log(\"this is the short audio error: \", error, \"This is audioEl\", audioEl.current)\r\n        })\r\n    } else if (timerType === 'longBreak') {\r\n      fetch(longSong)\r\n        .then(() => {\r\n          setAudioFile(longSong);\r\n        })\r\n        .then(() => {\r\n          return audioEl.current.play();\r\n        })\r\n        .catch(error => {\r\n          console.log(\"this is the long audio error: \", error, \"This is audioEl\", audioEl.current)\r\n        })\r\n    } else {\r\n      console.log('short and long audio is false')\r\n    }\r\n\r\n    return audioEl.current.pause();\r\n  });\r\n\r\n  return (\r\n    <section className=\"musicPlayer\">\r\n      <button onClick={() => { setIsMuted(!isMuted) }}>mute</button>\r\n      {isMuted\r\n        ? <audio muted src={audioFile} ref={audioEl} ></audio>\r\n        : <audio src={audioFile} ref={audioEl} ></audio>\r\n      }\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default MusicPlayer;\r\n\r\n","import EmptyTimer from '../components/timer/EmptyTimer';\r\nimport SetTimer from '../components/timer/SetTimer';\r\nimport Timer from '../components/timer/Timer';\r\nimport MusicPlayer from '../components/timer/MusicPlayer';\r\n\r\nimport { useState, useEffect } from 'react';\r\n\r\nconst Healthidoro = ({ \r\n    setIsHealthidoro, \r\n    isMusicOnBreak, isAutoBreak, isAutoPomo, isBreakAlert,\r\n    pomoLength, setPomoLength, \r\n    breakLengthShort, setBreakLengthShort, \r\n    breakLengthLong, setBreakLengthLong, \r\n    longBreakInterval, setLongBreakInterval\r\n  }) => {\r\n    \r\n  // timerModes: 'empty', 'inputting', 'complete', 'break'\r\n  const [timerMode, setTimerMode] = useState('empty');\r\n  const [hrsInit, setHrsInit] = useState('0');\r\n  const [minsInit, setMinsInit] = useState('0');\r\n  const [secsInit, setSecsInit] = useState('0');\r\n\r\n  const [timerType, setTimerType] = useState('pomo');\r\n\r\n  useEffect(() => {\r\n    setIsHealthidoro(true);\r\n  })\r\n\r\n  switch (timerMode) {\r\n    case 'empty':\r\n      return <EmptyTimer \r\n        setTimerMode={setTimerMode}\r\n      />\r\n    case 'inputting':\r\n      return <SetTimer\r\n        setTimerMode={setTimerMode}\r\n        hrs={hrsInit}\r\n        setHrs={setHrsInit}\r\n        mins={minsInit}\r\n        setMins={setMinsInit}\r\n        secs={secsInit}\r\n        setSecs={setSecsInit}\r\n      />\r\n    case 'complete':\r\n      return (\r\n        <main>\r\n          <Timer \r\n            setTimerMode={setTimerMode}\r\n            hrsInit={hrsInit}\r\n            minsInit={minsInit}\r\n            secsInit={secsInit}\r\n\r\n            timerType={timerType}\r\n            setTimerType={setTimerType}\r\n\r\n            pomoLength={pomoLength}\r\n            setPomoLength={setPomoLength}\r\n            breakLengthShort={breakLengthShort}\r\n            setBreakLengthShort={setBreakLengthShort}\r\n            breakLengthLong={breakLengthLong}\r\n            setBreakLengthLong={setBreakLengthLong}\r\n            longBreakInterval={longBreakInterval}\r\n            setLongBreakInterval={setLongBreakInterval}\r\n\r\n            isAutoBreak={isAutoBreak}\r\n            isAutoPomo={isAutoPomo}\r\n            isBreakAlert={isBreakAlert}\r\n          />\r\n          {timerType !== 'pomo' && isMusicOnBreak === true ? <MusicPlayer timerType={timerType} /> : null}\r\n        </main>\r\n      )\r\n    default:\r\n      return <EmptyTimer\r\n        setTimerMode={setTimerMode}\r\n      />\r\n  }\r\n}\r\n\r\nexport default Healthidoro;","// import { pages } from '../pages.module.scss';\r\nimport { useEffect } from 'react';\r\n\r\nconst Pomobasic = ({setIsHealthidoro}) => {\r\n  useEffect(() => {\r\n    setIsHealthidoro(false);\r\n  })\r\n\r\n  return (\r\n    <main>\r\n      <p>a work in progress...</p>\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default Pomobasic;","import { Dialog, DialogTitle, DialogContent } from '@material-ui/core';\r\n\r\nconst Info = ({open, setOpen}) => {\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n  \r\n  return (\r\n    <Dialog open={open} onClose={handleClose} aria-labelledby=\"info\">\r\n      <DialogTitle id=\"info\">Info</DialogTitle>\r\n      <DialogContent>\r\n        <p>there are 2 rules everyone who stares at a computer all day should know</p>\r\n        <ul>\r\n          <li>1) Every 20 mins take a 20 second break to look at somewhere 20 feet away</li>\r\n          <li>2) Every hour of sitting, stand up and take a 2 minute walk</li>\r\n        </ul>\r\n        <p>these tips will help reduce eye strain, eye fatigue, headaches caused by strain and fatigue as well as improve your heart health, overall health and increase longevity. Or so the sources online says</p>\r\n        <p>but it's a pain to set this all up yourself every single time, so this app is here to help you</p>\r\n        <p>it will play music every 20 mins for 20 seconds and at every hour for 2 minutes. This way you can be healthy while sitting in front of a computer all day.</p>\r\n      </DialogContent>\r\n    </Dialog>\r\n  )\r\n}\r\n\r\nexport default Info;","import { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst SettingsHealthidoro = () => {\r\n  const [isStandardWorkday, setIsStandardWorkday] = useState(true);\r\n  const changePomoModes = e => {\r\n    e.preventDefault();\r\n    setIsStandardWorkday(!isStandardWorkday);\r\n  }\r\n\r\n  return (\r\n    <li>\r\n      <Link to='/basic'>change to pomobasic</Link>\r\n      <button onClick={changePomoModes}>\r\n        {isStandardWorkday ? \"workday = pomos + break\" : \"workday = pomo only\"}\r\n      </button>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default SettingsHealthidoro;","\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nconst SettingsPomobasic = () => (\r\n  <li>\r\n    <p>pomodoro settings</p>\r\n    <Link to='/'>change to Healthidoro</Link>\r\n    <ul>\r\n      <li>\r\n        <input type=\"text\" name=\"pomoLength\" id=\"pomoLength\" disabled />\r\n        <label htmlFor=\"pomoLength\">Pomo Length</label>\r\n      </li>\r\n      <li>\r\n        <input type=\"text\" name=\"shortBreakLength\" id=\"shortBreakLength\" disabled />\r\n        <label htmlFor=\"shortBreakLength\">Short Break Length</label>\r\n      </li>\r\n      <li>\r\n        <input type=\"text\" name=\"longBreakLength\" id=\"longBreakLength\" disabled />\r\n        <label htmlFor=\"longBreakLength\">Long Break Length</label>\r\n      </li>\r\n      <li>\r\n        <input type=\"text\" name=\"longBreakInterval\" id=\"longBreakInterval\" disabled />\r\n        <label htmlFor=\"longBreakInterval\">Long Break Interval</label>\r\n      </li>\r\n    </ul>\r\n  </li>\r\n)\r\n\r\nexport default SettingsPomobasic;","import { useState } from 'react';\r\nimport { Dialog, DialogTitle } from '@material-ui/core';\r\nimport SettingsHealthidoro from './SettingsHealthidoro';\r\nimport SettingsPomobasic from './SettingsPomobasic';\r\n\r\n\r\nconst Settings = ({\r\n  open, setOpen, isHealthidoro, setIsHealthidoro, \r\n  isMusicOnBreak, setIsMusicOnBreak, \r\n  isAutoBreak, setIsAutoBreak, isAutoPomo, setIsAutoPomo, isBreakAlert, setIsBreakAlert\r\n}) => {\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n  const handleSubmit = e => {\r\n    e.preventDefault()\r\n    setOpen(false);\r\n  };\r\n\r\n\r\n  const [isDarkMode, setIsDarkMode] = useState(true);\r\n\r\n\r\n  const buttonHandler = (e, setButtonState, buttonState) => {\r\n    e.preventDefault();\r\n    setButtonState(!buttonState);\r\n  }\r\n\r\n  return (\r\n    <Dialog open={open} onClose={handleClose} aria-labelledby=\"settings\">\r\n      <DialogTitle id=\"settings\">Settings</DialogTitle>\r\n      <form action=\"\">\r\n        <ul>\r\n          <li>\r\n            <label htmlFor=\"dark-mode\">dark mode</label>\r\n            <button\r\n              aria-labelledby=\"dark-mode\"\r\n              role=\"switch\" \r\n              aria-checked=\"true\"\r\n              type=\"button\"\r\n              onClick={e => buttonHandler(e, setIsDarkMode, isDarkMode)}\r\n            >\r\n              <span>on</span>\r\n              <span>off</span>\r\n            </button>\r\n          </li>\r\n          <li>\r\n            <label htmlFor=\"break-music\">play music on break</label>\r\n            <button\r\n              aria-labelledby=\"break-music\"\r\n              role=\"switch\"\r\n              aria-checked=\"true\"\r\n              type=\"button\"\r\n              onClick={e => buttonHandler(e, setIsMusicOnBreak, isMusicOnBreak)}\r\n            >\r\n              <span>on</span>\r\n              <span>off</span>\r\n            </button>\r\n          </li>\r\n          <li>\r\n            <label htmlFor=\"break-alert\">alert on break</label>\r\n            <button\r\n              aria-labelledby=\"break-alert\"\r\n              role=\"switch\"\r\n              aria-checked=\"false\"\r\n              type=\"button\"\r\n              onClick={e => buttonHandler(e, setIsBreakAlert, isBreakAlert)}\r\n            >\r\n              <span>on</span>\r\n              <span>off</span>\r\n            </button>\r\n          </li>\r\n          <li>\r\n            <label htmlFor=\"autostart-break\">autostart break</label>\r\n            <button\r\n              aria-labelledby=\"autostart-break\"\r\n              role=\"switch\"\r\n              aria-checked=\"true\"\r\n              onClick={e => buttonHandler(e, setIsAutoBreak, isAutoBreak)}\r\n            >\r\n              <span>on</span>\r\n              <span>off</span>\r\n            </button>\r\n          </li>\r\n          <li>\r\n            <label htmlFor=\"autostart-pomo\">autostart pomo</label>\r\n            <button\r\n              aria-labelledby=\"autostart-pomo\"\r\n              role=\"switch\"\r\n              aria-checked=\"true\"\r\n              onClick={e => buttonHandler(e, setIsAutoPomo, isAutoPomo)}\r\n            >\r\n              <span>on</span>\r\n              <span>off</span>\r\n            </button>\r\n          </li>\r\n          {isHealthidoro ? <SettingsHealthidoro /> : <SettingsPomobasic />}\r\n        </ul>\r\n\r\n        <button type=\"submit\" onClick={handleSubmit}>ok</button>\r\n      </form>\r\n    </Dialog>\r\n  )\r\n}\r\n\r\nexport default Settings;","import styles from './Clock.module.scss';\r\nimport { useEffect, useState } from 'react';\r\n\r\nconst Clock = () => {\r\n  const [clockHr, setClockHr] = useState(new Date().getHours());\r\n  const [clockMin, setClockMin] = useState(new Date().getMinutes());\r\n\r\n  useEffect(() => {\r\n    let interval = null;\r\n    interval = setInterval(() => {\r\n      if (new Date().getHours() < 10) {\r\n        setClockHr(`0${new Date().getHours()}`);\r\n      } else {\r\n        setClockHr(new Date().getHours());\r\n      }\r\n\r\n      if (new Date().getMinutes() < 10) {\r\n        setClockMin(`0${new Date().getMinutes()}`);\r\n      } else {\r\n        setClockMin(new Date().getMinutes());\r\n      }\r\n\r\n    }, 1000)\r\n    return (() => clearInterval(interval))\r\n  }, [clockMin, clockHr])\r\n\r\n  return <p className={`${styles.Clock} clock`}>{`${clockHr}:${clockMin}`}</p>;\r\n}\r\n\r\nexport default Clock;\r\n","// import styles from './Footer.module.scss';\r\nimport Clock from './Clock';\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer \r\n    // className={styles.Footer}\r\n    >\r\n      <Clock />\r\n      <p>&copy; 2021 <a href=\"http://cecilezhang.com\">xixi</a></p>\r\n    </footer>\r\n  )\r\n}\r\n\r\nexport default Footer;","import './App.scss';\r\nimport Header from './components/header/Header';\r\nimport Healthidoro from './pages/Healthidoro';\r\nimport Pomobasic from './pages/Pomobasic';\r\nimport Info from './components/header/Info';\r\nimport Settings from './components/header/Settings';\r\nimport Footer from './components/footer/Footer';\r\n\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport { useState } from 'react';\r\n\r\n\r\nfunction App() {\r\n  const [isHealthidoro, setIsHealthidoro] = useState(true);\r\n  const [isInfoOpen, setIsInfoOpen] = useState(false);\r\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\r\n\r\n  const [isMusicOnBreak, setIsMusicOnBreak] = useState(true);\r\n  const [isAutoBreak, setIsAutoBreak] = useState(true);\r\n  const [isAutoPomo, setIsAutoPomo] = useState(true);\r\n  const [isBreakAlert, setIsBreakAlert] = useState(true);\r\n\r\n  const [pomoLength, setPomoLength] = useState(3);\r\n  const [breakLengthShort, setBreakLengthShort] = useState(3);\r\n  const [breakLengthLong, setBreakLengthLong] = useState(6);\r\n  const [longBreakInterval, setLongBreakInterval] = useState(3);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header \r\n        isHealthidoro={isHealthidoro}\r\n        handleInfoClick={() => setIsInfoOpen(true)} \r\n        handleSettingsClick={() => setIsSettingsOpen(true)}\r\n      />\r\n\r\n      <Switch>\r\n        <Route path=\"/basic\" render={() => (\r\n          <Pomobasic\r\n            setIsHealthidoro={setIsHealthidoro}\r\n            pomoLength={pomoLength}\r\n            setPomoLength={setPomoLength}\r\n            breakLengthShort={breakLengthShort}\r\n            setBreakLengthShort={setBreakLengthShort}\r\n            breakLengthLong={breakLengthLong}\r\n            setBreakLengthLong={setBreakLengthLong}\r\n            longBreakInterval={longBreakInterval}\r\n            setLongBreakInterval={setLongBreakInterval}\r\n          />\r\n        )} />\r\n        <Route path=\"/\" render={() => (\r\n          <Healthidoro \r\n            setIsHealthidoro={setIsHealthidoro}\r\n            pomoLength={pomoLength}\r\n            setPomoLength={setPomoLength}\r\n            breakLengthShort={breakLengthShort}\r\n            setBreakLengthShort={setBreakLengthShort}\r\n            breakLengthLong={breakLengthLong}\r\n            setBreakLengthLong={setBreakLengthLong}\r\n            longBreakInterval={longBreakInterval}\r\n            setLongBreakInterval={setLongBreakInterval}\r\n\r\n            isMusicOnBreak={isMusicOnBreak}\r\n            isAutoBreak={isAutoBreak}\r\n            isAutoPomo={isAutoPomo}\r\n            isBreakAlert={isBreakAlert}\r\n          />\r\n        )} />\r\n      </Switch>\r\n\r\n      <Info \r\n        open={isInfoOpen}\r\n        setOpen={setIsInfoOpen}\r\n        isHealthidoro={isHealthidoro}\r\n        setIsHealthidoro={setIsHealthidoro}\r\n      />\r\n\r\n      <Settings\r\n        open={isSettingsOpen}\r\n        setOpen={setIsSettingsOpen}\r\n        isHealthidoro={isHealthidoro}\r\n        setIsHealthidoro={setIsHealthidoro}\r\n\r\n        isMusicOnBreak={isMusicOnBreak}\r\n        setIsMusicOnBreak={setIsMusicOnBreak}\r\n        isAutoBreak={isAutoBreak}\r\n        setIsAutoBreak={setIsAutoBreak}\r\n        isAutoPomo={isAutoPomo}\r\n        setIsAutoPomo={setIsAutoPomo}\r\n        isBreakAlert={isBreakAlert}\r\n        setIsBreakAlert={setIsBreakAlert}\r\n      />\r\n\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}